---
- name: Rotate Coin
  hosts: alpine_host
  gather_facts: no
  become: yes
  vars: 
    ansible_remote_tmp: /tmp
    ansible_ssh_args: '-o ControlMaster=auto -o ControlPersist=10m'
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
    pb_config_ng_dir: /root/pb-config-ng
    tools_dir: "{{ pb_config_ng_dir }}/tools/filter_coin"
    global_timeout: 600  # 10 minutes in seconds
  tasks:
    - name: Change to pb-config-ng directory and pull latest changes
      become: yes
      become_user: debian
      shell: cd {{ pb_config_ng_dir }} && git pull
      register: git_result
      failed_when: git_result.rc != 0
      changed_when: git_result.stdout != 'Already up to date.'
      # Add timeout to prevent hanging
      async: "{{ global_timeout }}"
      poll: 5

    - name: Display git status
      become: yes
      become_user: debian
      debug:
        msg: "{{ git_result.stdout_lines }}"

    - name: Activate virtual environment and run rotate coin script
      become: yes
      become_user: debian
      shell: cd {{ tools_dir }} && . venv/bin/activate && python3 -u filter_coins.py --once
      register: python_result
      # Using '.' instead of 'source' for better shell compatibility
      # The -u flag makes Python output unbuffered, which helps with real-time logging
      failed_when: python_result.rc != 0
      # Add timeout to prevent hanging
      async: "{{ global_timeout }}"
      poll: 5
      args:
        executable: /bin/bash

    - name: Display Python script output
      become: yes
      become_user: debian
      debug:
        msg: "{{ python_result.stdout_lines }}"
      when: python_result.stdout_lines | length > 0

    - name: Display Python script errors (if any)
      become: yes
      become_user: debian
      debug:
        msg: "{{ python_result.stderr_lines }}"
      when: python_result.stderr_lines | length > 0

    - name: Deactivate virtual environment
      become: yes
      become_user: debian
      shell: cd {{ tools_dir }} && if type deactivate >/dev/null 2>&1; then deactivate; fi
      # Check if deactivate function exists before trying to run it
      args:
        executable: /bin/bash
 
