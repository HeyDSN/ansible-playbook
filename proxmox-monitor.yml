---
- name: Proxmox Performance Monitoring
  hosts: proxmox_node
  become: yes
  vars:
    ansible_ssh_args: '-o ControlMaster=no -o ControlPersist=no'
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
    discord_webhook: "{{ lookup('env', 'ADW_PROXMOX') }}"
    cpu_threshold: 60  # CPU usage threshold in percentage
    memory_threshold: 60  # Memory usage threshold in percentage
    storage_threshold: 60  # Storage usage threshold in percentage

  tasks:
    - name: Collect system-wide performance metrics
      shell: |
        echo "System Metrics:"
        echo "CPU Usage: $(top -bn1 | grep "Cpu(s)" | sed "s/.*, *\([0-9.]*\)%* id.*/\1/" | awk '{print 100 - $1}')%"
        echo "Memory Usage: $(free | grep Mem | awk '{print $3/$2 * 100.0}')%"
        echo "Storage Usage: $(df -h / | awk '/\// {print $5}')"
      register: system_metrics

    - name: Collect VM and LXC metrics
      shell: |
        echo "VM and LXC Metrics:"
        qm list | tail -n +2 | while read vm; do
          vmid=$(echo $vm | awk '{print $1}')
          name=$(echo $vm | awk '{print $2}')
          status=$(echo $vm | awk '{print $3}')
          if [ "$status" == "running" ]; then
            if [ -f "/var/run/qemu-server/${vmid}.pid" ]; then
              pid=$(cat "/var/run/qemu-server/${vmid}.pid")
              vm_stats=$(top -b -n1 -p $pid | tail -n 1)
              cpu=$(echo $vm_stats | awk '{print $9}')
              mem=$(echo $vm_stats | awk '{print $10}')
              echo "VM $name (ID: $vmid) - CPU: ${cpu}%, Memory: ${mem}%"
            else
              echo "VM $name (ID: $vmid) - PID file not found"
            fi
          fi
        done
        pct list | tail -n +2 | while read ct; do
          ctid=$(echo $ct | awk '{print $1}')
          name=$(echo $ct | awk '{print $3}')
          status=$(echo $ct | awk '{print $2}')
          if [ "$status" == "running" ]; then
            cpu=$(pct exec $ctid -- top -bn1 | grep "Cpu(s)" | sed "s/.*, *\([0-9.]*\)%* id.*/\1/" | awk '{print 100 - $1}')
            mem=$(pct exec $ctid -- free | grep Mem | awk '{print $3/$2 * 100.0}')
            echo "CT $name (ID: $ctid) - CPU: ${cpu}%, Memory: ${mem}%"
          fi
        done
      register: vm_lxc_metrics

    - name: Generate performance report
      set_fact:
        performance_report:
          embeds:
            - title: "📊 Proxmox Performance Report"
              color: 3066993
              fields:
                - name: "🖥️ System Metrics"
                  value: "{{ system_metrics.stdout_lines | join('\n') }}"
                - name: "💻 VM and LXC Metrics"
                  value: "{{ vm_lxc_metrics.stdout_lines | join('\n') }}"
              description: |-
                **⚠️ Alerts:**
                {% set cpu = system_metrics.stdout_lines[1] | regex_search('([0-9.]+)%$') | float %}
                {% set mem = system_metrics.stdout_lines[2] | regex_search('([0-9.]+)%$') | float %}
                {% set storage = system_metrics.stdout_lines[3] | regex_search('([0-9]+)%') | int %}
                {% set alerts = [] %}
                {% if cpu > cpu_threshold %}
                  {% set _ = alerts.append('High CPU usage: ' ~ cpu | round(2) ~ '%') %}
                {% endif %}
                {% if mem > memory_threshold %}
                  {% set _ = alerts.append('High Memory usage: ' ~ mem | round(2) ~ '%') %}
                {% endif %}
                {% if storage > storage_threshold %}
                  {% set _ = alerts.append('High Storage usage: ' ~ storage ~ '%') %}
                {% endif %}
                {% if alerts | length > 0 %}
                {{ alerts | join('\n') }}
                {% else %}
                No alerts at this time.
                {% endif %}

    - name: Send Discord notification
      uri:
        url: "{{ discord_webhook }}"
        method: POST
        body_format: json
        body: "{{ performance_report }}"
        status_code: [204, 200]
      when: discord_webhook | length > 0

    - name: Display performance report (Debug)
      debug:
        var: performance_report
