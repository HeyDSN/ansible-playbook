---
- hosts: all
  gather_facts: no
  become: yes
  vars:
    ansible_remote_tmp: /tmp
    ansible_ssh_args: '-o ControlMaster=no -o ControlPersist=no'
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
    proxmox_host: "{{ lookup('env', 'PROXMOX_HOST') }}"
    proxmox_node: "{{ lookup('env', 'PROXMOX_NODE') }}"
    proxmox_api_token: "{{ lookup('env', 'PROXMOX_API_TOKEN') }}"

  pre_tasks:
    - name: Include Proxmox resource management tasks
      include_tasks: _proxmox-vm-management.yml
      when: "'proxmox_vm_id' in hostvars[inventory_hostname]"

    - name: Gather facts
      setup:

    - name: Include pre-requisite tasks
      include_tasks: _prereq_tasks.yml

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
      register: apt_update_result

    - name: Get upgradable packages (dry-run)
      command: apt-get -s upgrade
      register: upgrade_dry_run
      changed_when: false

    - name: Parse upgradable packages
      set_fact:
        upgradable_packages: "{{ upgrade_dry_run.stdout_lines | select('match', '^Inst.*') | list }}"

    - name: Get list of manually held packages
      shell: apt-mark showhold
      register: manually_held_packages
      changed_when: false

    - name: Get list of all upgradable packages
      shell: apt list --upgradable 2>/dev/null | grep -v '^Listing...' | cut -d'/' -f1
      register: all_upgradable_packages
      changed_when: false

    - name: Get list of packages that would be upgraded
      shell: apt-get --simulate dist-upgrade | grep '^Inst' | awk '{print $2}'
      register: would_be_upgraded
      changed_when: false

    - name: Identify system-held packages
      set_fact:
        system_held_packages: "{{ all_upgradable_packages.stdout_lines | difference(would_be_upgraded.stdout_lines) | difference(manually_held_packages.stdout_lines) }}"

    - name: Perform apt upgrade
      apt:
        upgrade: yes
      register: apt_upgrade_result
      when: upgradable_packages | length > 0

    - name: Perform apt autoremove (dry-run)
      command: apt-get --dry-run autoremove
      register: autoremove_dry_run
      changed_when: false

    - name: Parse autoremovable packages
      set_fact:
        autoremovable_packages: "{{ autoremove_dry_run.stdout_lines | select('match', '^Remv.*') | list }}"

    - name: Perform apt autoremove
      apt:
        autoremove: yes
      register: apt_autoremove_result
      when: autoremovable_packages | length > 0

    - name: Perform apt autoclean
      apt:
        autoclean: yes
      register: apt_autoclean_result

    - name: Check if reboot is required
      stat:
        path: /var/run/reboot-required
      register: reboot_required_file

    - name: Get disk space in package cache
      shell: du -sh /var/cache/apt/archives
      register: disk_space_cache
      changed_when: false

    - name: Set notification flag
      set_fact:
        should_notify: "{{ (upgradable_packages | length > 0) or (autoremovable_packages | length > 0) or reboot_required_file.stat.exists }}"

    - name: Prepare Discord notification message
      set_fact:
        discord_message:
          embeds:
            - title: "🔄 Apt Upgrade and Cleanup Report for {{ inventory_hostname }}"
              color: "{{ '15158332' if reboot_required_file.stat.exists else '3066993' }}"
              fields:
                - name: "🖥️ Host"
                  value: "{{ inventory_hostname }}"
                  inline: true
                - name: "📦 Upgraded Packages"
                  value: "{{ upgradable_packages | length }}"
                  inline: true
                - name: "🗑️ Removed Packages"
                  value: "{{ autoremovable_packages | length }}"
                  inline: true
                - name: "💾 Disk Space in Package Cache"
                  value: "{{ disk_space_cache.stdout.split()[0] }}"
                  inline: true
                - name: "🔒 Held Packages"
                  value: "{{ (manually_held_packages.stdout_lines + system_held_packages) | length }}"
                  inline: true
              description: |-
                {% if reboot_required_file.stat.exists %}
                **⚠️ REBOOT REQUIRED ⚠️**
                A system restart is necessary to complete the upgrade process.
                {% endif %}

                {% if upgradable_packages | length > 0 %}
                **📋 Upgraded Packages:**
                ```
                {% for package in upgradable_packages %}
                • {{ package | regex_replace('^Inst\\s+(\\S+).*$', '\\1') }}
                {% endfor %}
                ```
                {% else %}
                **📋 No packages were upgraded in this run.**
                {% endif %}

                {% if autoremovable_packages | length > 0 %}
                **🗑️ Autoremoved Packages:**
                ```
                {% for package in autoremovable_packages %}
                • {{ package | regex_replace('^Remv\\s+(\\S+).*$', '\\1') }}
                {% endfor %}
                ```
                {% else %}
                **🗑️ No packages were autoremoved.**
                {% endif %}

                **🧹 Cleanup Operations:**
                • Autoremove: {{ 'Performed' if autoremovable_packages | length > 0 else 'No packages to remove' }}
                • Autoclean: Performed

                {% if manually_held_packages.stdout_lines | length > 0 or system_held_packages | length > 0 %}
                **🔒 Held Packages:**
                ```
                {% for package in manually_held_packages.stdout_lines %}
                • {{ package }} (manually held)
                {% endfor %}
                {% for package in system_held_packages %}
                • {{ package }} (system held)
                {% endfor %}
                ```
                {% else %}
                **🔓 No packages are being held back.**
                {% endif %}
              footer:
                text: "Report generated on {{ ansible_date_time.iso8601 }}"
      when: should_notify

    - name: Send Discord notification
      uri:
        url: "{{ lookup('env', 'ADW_UPDATE') }}"
        method: POST
        body_format: json
        body: "{{ discord_message }}"
        status_code: [204, 200]  # Accept both 204 and 200 as success
      when: should_notify and lookup('env', 'ADW_UPDATE') | length > 0

    - name: Display upgrade report (Debug)
      debug:
        var: discord_message
      when: should_notify

  post_tasks:
    - name: Power off resource if it was originally off
      block:
        - name: Stop Proxmox resource
          uri:
            url: "https://{{ proxmox_host }}/api2/json/nodes/{{ proxmox_node }}/{{ resource_type }}/{{ proxmox_vm_id }}/status/stop"
            method: POST
            validate_certs: no
            headers:
              Authorization: "{{ proxmox_api_token }}"
          delegate_to: localhost
          become: no

        - name: Send power off notification
          uri:
            url: "{{ lookup('env', 'ADW_PROXMOX') }}"
            method: POST
            body_format: json
            body:
              embeds:
                - title: "🔴 Proxmox Resource Powered Off"
                  color: 15158332
                  fields:
                    - name: "Resource"
                      value: "{{ inventory_hostname }}"
                    - name: "Type"
                      value: "{{ 'VM' if resource_type == 'qemu' else 'LXC Container' }}"
                    - name: "ID"
                      value: "{{ proxmox_vm_id }}"
                  description: "The resource was powered off after completing maintenance tasks."
                  footer:
                    text: "Powered off at {{ ansible_date_time.iso8601 }}"
            status_code: [204, 200]
          delegate_to: localhost
          become: no
      when: 
        - original_resource_state is defined
        - original_resource_state == 'stopped'
        - "'proxmox_vm_id' in hostvars[inventory_hostname]"
        - lookup('env', 'ADW_PROXMOX') | length > 0
