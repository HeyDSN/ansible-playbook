---
- hosts: all
  gather_facts: no
  become: yes
  vars:
    ansible_ssh_args: '-o ControlMaster=no -o ControlPersist=no'
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
  tasks:
    - name: Check for updates (Standard systems)
      apt:
        update_cache: yes
      when: "'standard_vms' in group_names"
      register: apt_update_result

    - name: Get list of upgradable packages (Standard systems)
      shell: apt list --upgradable 2>/dev/null | grep -v '^Listing...'
      register: upgradable_packages
      changed_when: false
      when: "'standard_vms' in group_names"

    - name: Count available updates (Standard systems)
      set_fact:
        update_count: "{{ upgradable_packages.stdout_lines | length }}"
      when: "'standard_vms' in group_names"

    - name: Check for updates (DietPi systems)
      command: dietpi-update --check
      register: dietpi_update_result
      changed_when: false
      when: "'dietpi_vms' in group_names"

    - name: Count available updates (DietPi systems)
      shell: dietpi-update --available | grep -c 'Update available'
      register: updates_count_dietpi
      changed_when: false
      when: "'dietpi_vms' in group_names"

    - name: Set fact for update count (DietPi systems)
      set_fact:
        update_count: "{{ updates_count_dietpi.stdout|default('0')|int }}"
      when: "'dietpi_vms' in group_names"

    - name: Prepare Discord notification message
      set_fact:
        discord_message:
          embeds:
            - title: "Update Available on {{ inventory_hostname }}"
              color: 15158332  # Red color
              fields:
                - name: "Updates Available"
                  value: "{{ update_count }}"
                  inline: true
                - name: "Host"
                  value: "{{ inventory_hostname }}"
                  inline: true
              description: |-
                {% if 'standard_vms' in group_names and upgradable_packages.stdout_lines | length > 0 %}
                **Upgradable packages:**
                ```
                {% for package in upgradable_packages.stdout_lines %}
                {{ package }}
                {% endfor %}
                ```
                {% endif %}
      when: update_count|int > 0

    - name: Send Discord notification
      uri:
        url: "{{ lookup('env', 'DISCORD_WEBHOOK_URL') }}"
        method: POST
        body_format: json
        body: "{{ discord_message }}"
        status_code: [204, 200]  # Accept both 204 and 200 as success
      when: 
        - update_count|int > 0
        - lookup('env', 'DISCORD_WEBHOOK_URL') | length > 0

    - name: Notify if updates are available (Debug)
      debug:
        var: discord_message
      when: update_count|int > 0
